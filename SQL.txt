CREATE OR REPLACE FUNCTION GET_OUT_OF_AGE_VALUE_DB (V_DOCUMENT_ID NUMBER, V_DEPARTMENT_ID NUMBER,V_CUSTOMER_ID NUMBER, V_DATE DATE, V_DAY1 NUMBER, V_DAY2 NUMBER,V_DATE_TYPE NUMBER,V_SALES_MAN_ID NUMBER) RETURN NUMBER IS
CURSOR C1 IS
    SELECT NVL(SUM(INVOICES_TRANSACTIONS_VIEW.NET_PRICE * INVOICES_TRANSACTIONS_VIEW.EXCHANGE_RATE * DECODE(INVOICES_TRANSACTIONS_VIEW.DOCUMENT_TYPES_ID,1,1,15,1,-1)), 0) TOTAL
    FROM INVOICES_TRANSACTIONS_VIEW
    WHERE ((INVOICES_TRANSACTIONS_VIEW.CONFIRMED = 1 AND INVOICES_TRANSACTIONS_VIEW.CANCELED <> 1)
    OR     (CONFIRMED = 1 AND CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = INVOICES_TRANSACTIONS_VIEW.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = INVOICES_TRANSACTIONS_VIEW.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = INVOICES_TRANSACTIONS_VIEW.CUSTOMER_ID
                                                                                                             )))
    AND INVOICES_TRANSACTIONS_VIEW.PAYMENT_TYPE = 2
    --AND DECODE(V_DATE_TYPE,1,INVOICES_TRANSACTIONS_VIEW.DOCUMENT_DATE,INVOICES_TRANSACTIONS_VIEW.DUE_DATE) >= V_DATE - V_DAY1
    --AND DECODE(V_DATE_TYPE,1,INVOICES_TRANSACTIONS_VIEW.DOCUMENT_DATE,INVOICES_TRANSACTIONS_VIEW.DUE_DATE) <= V_DATE - V_DAY2
    AND INVOICES_TRANSACTIONS_VIEW.DUE_DATE  > V_DATE
    AND INVOICES_TRANSACTIONS_VIEW.DOCUMENT_DATE<= V_DATE 
    AND (SALES_MAN_ID=V_SALES_MAN_ID OR V_SALES_MAN_ID IS NULL)
    AND INVOICES_TRANSACTIONS_VIEW.CUSTOMER_ID = V_CUSTOMER_ID
    AND INVOICES_TRANSACTIONS_VIEW.DOCUMENT_ID=V_DOCUMENT_ID
    AND INVOICES_TRANSACTIONS_VIEW.DEPARTMENT_ID=V_DEPARTMENT_ID;
V_TOTAL NUMBER;

CURSOR C2 IS
    SELECT NVL(SUM(SAL_INVOICES_PAYMENT.PAID_AMOUNT * SAL_INVOICES.EXCHANGE_RATE) , 0) PAID_SAL_INV
    FROM SAL_INVOICES, SAL_INVOICES_PAYMENT,JOURNALS
    WHERE SAL_INVOICES.DOCUMENT_ID = SAL_INVOICES_PAYMENT.DOCUMENT_ID
    AND SAL_INVOICES.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.DEPARTMENT_ID
    AND JOURNALS.DOCUMENT_ID = SAL_INVOICES_PAYMENT.BASE_DOCUMENT_ID
    AND JOURNALS.DEPARTMENT_ID = SAL_INVOICES_PAYMENT.BASE_DEPARTMENT_ID
    AND (JOURNALS.CONFIRMED = 1 AND JOURNALS.CANCELED <> 1)
    AND ((SAL_INVOICES.CONFIRMED = 1    AND SAL_INVOICES.CANCELED <> 1)
    OR     (SAL_INVOICES.CONFIRMED = 1 AND SAL_INVOICES.CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_INVOICES.CUSTOMER_ID
                                                                                                             )))
    AND SAL_INVOICES.PAYMENT_TYPE = 2
    --AND DECODE(V_DATE_TYPE,1,SAL_INVOICES.DOCUMENT_DATE,SAL_INVOICES.DUE_DATE) >= V_DATE - V_DAY1
    --AND DECODE(V_DATE_TYPE,1,SAL_INVOICES.DOCUMENT_DATE,SAL_INVOICES.DUE_DATE) <= V_DATE - V_DAY2
    AND SAL_INVOICES.DUE_DATE  > V_DATE
    AND SAL_INVOICES.DOCUMENT_DATE <= V_DATE 
    AND (SALES_MAN_ID=V_SALES_MAN_ID OR V_SALES_MAN_ID IS NULL)
    AND JOURNALS.DOCUMENT_DATE <= V_DATE
    AND SAL_INVOICES.CUSTOMER_ID = V_CUSTOMER_ID
    AND SAL_INVOICES.DOCUMENT_ID=V_DOCUMENT_ID
    AND SAL_INVOICES.DEPARTMENT_ID=V_DEPARTMENT_ID;
V_PAID_SAL_INV NUMBER;

CURSOR C3 IS
    SELECT NVL(SUM(SAL_SERVICES_INVOICES_PAYMENT.PAID_AMOUNT * SAL_SERVICES_INVOICES.EXCHANGE_RATE) , 0) PAID_SER_INV
    FROM SAL_SERVICES_INVOICES, SAL_SERVICES_INVOICES_PAYMENT,JOURNALS
    WHERE SAL_SERVICES_INVOICES.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DOCUMENT_ID
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.DEPARTMENT_ID
    AND JOURNALS.DOCUMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.BASE_DOCUMENT_ID
    AND JOURNALS.DEPARTMENT_ID = SAL_SERVICES_INVOICES_PAYMENT.BASE_DEPARTMENT_ID
    AND (JOURNALS.CONFIRMED = 1 AND JOURNALS.CANCELED <> 1)
    AND ((SAL_SERVICES_INVOICES.CONFIRMED = 1    AND SAL_SERVICES_INVOICES.CANCELED <> 1)
    OR     (SAL_SERVICES_INVOICES.CONFIRMED = 1 AND SAL_SERVICES_INVOICES.CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_INVOICES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_INVOICES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_INVOICES.CUSTOMER_ID
                                                                                                             )))
    AND SAL_SERVICES_INVOICES.PAYMENT_TYPE = 2
    --AND DECODE(V_DATE_TYPE,1,SAL_SERVICES_INVOICES.DOCUMENT_DATE,SAL_SERVICES_INVOICES.DUE_DATE) >= V_DATE - V_DAY1
    --AND DECODE(V_DATE_TYPE,1,SAL_SERVICES_INVOICES.DOCUMENT_DATE,SAL_SERVICES_INVOICES.DUE_DATE) <= V_DATE - V_DAY2
    AND SAL_SERVICES_INVOICES.DUE_DATE  > V_DATE
    AND SAL_SERVICES_INVOICES.DOCUMENT_DATE <= V_DATE 
    AND (SALES_MAN_ID=V_SALES_MAN_ID OR V_SALES_MAN_ID IS NULL)
    AND JOURNALS.DOCUMENT_DATE <= V_DATE
    AND SAL_SERVICES_INVOICES.CUSTOMER_ID = V_CUSTOMER_ID
    AND SAL_SERVICES_INVOICES.DOCUMENT_ID=V_DOCUMENT_ID
    AND SAL_SERVICES_INVOICES.DEPARTMENT_ID=V_DEPARTMENT_ID;
V_PAID_SER_INV NUMBER;

CURSOR C5 IS
    SELECT NVL(SUM(SAL_RETURNES_PAYMENT.PAID_AMOUNT * SAL_RETURNES.EXCHANGE_RATE) , 0) PAID_SAL_INV
    FROM SAL_RETURNES, SAL_RETURNES_PAYMENT,JOURNALS
    WHERE SAL_RETURNES.DOCUMENT_ID = SAL_RETURNES_PAYMENT.DOCUMENT_ID
    AND SAL_RETURNES.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.DEPARTMENT_ID
    AND JOURNALS.DOCUMENT_ID = SAL_RETURNES_PAYMENT.BASE_DOCUMENT_ID
    AND JOURNALS.DEPARTMENT_ID = SAL_RETURNES_PAYMENT.BASE_DEPARTMENT_ID
    AND (JOURNALS.CONFIRMED = 1 AND JOURNALS.CANCELED <> 1)
    AND ((SAL_RETURNES.CONFIRMED = 1 AND SAL_RETURNES.CANCELED <> 1)
    OR     (SAL_RETURNES.CONFIRMED = 1 AND SAL_RETURNES.CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_RETURNES.CUSTOMER_ID
                                                                                                             )))
    AND SAL_RETURNES.PAYMENT_TYPE = 2
    --AND DECODE(V_DATE_TYPE,1,SAL_RETURNES.DOCUMENT_DATE,SAL_RETURNES.DUE_DATE) >= V_DATE - V_DAY1
    --AND DECODE(V_DATE_TYPE,1,SAL_RETURNES.DOCUMENT_DATE,SAL_RETURNES.DUE_DATE) <= V_DATE - V_DAY2
    AND (SALES_MAN_ID=V_SALES_MAN_ID OR V_SALES_MAN_ID IS NULL)
    AND SAL_RETURNES.DUE_DATE  > V_DATE
    AND SAL_RETURNES.DOCUMENT_DATE <= V_DATE 
    AND JOURNALS.DOCUMENT_DATE <= V_DATE
    AND SAL_RETURNES.CUSTOMER_ID = V_CUSTOMER_ID
    AND SAL_RETURNES.DOCUMENT_ID=V_DOCUMENT_ID
    AND SAL_RETURNES.DEPARTMENT_ID=V_DEPARTMENT_ID;
V_PAID_SAL_INV_R NUMBER;

CURSOR C6 IS
    SELECT NVL(SUM(SAL_SERVICES_RETURNES_PAYMENT.PAID_AMOUNT * SAL_SERVICES_RETURNES.EXCHANGE_RATE) , 0) PAID_SER_INV
    FROM SAL_SERVICES_RETURNES, SAL_SERVICES_RETURNES_PAYMENT,JOURNALS
    WHERE SAL_SERVICES_RETURNES.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DOCUMENT_ID
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.DEPARTMENT_ID
    AND JOURNALS.DOCUMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.BASE_DOCUMENT_ID
    AND JOURNALS.DEPARTMENT_ID = SAL_SERVICES_RETURNES_PAYMENT.BASE_DEPARTMENT_ID
    AND (JOURNALS.CONFIRMED = 1 AND JOURNALS.CANCELED <> 1)
    AND ((SAL_SERVICES_RETURNES.CONFIRMED = 1 AND SAL_SERVICES_RETURNES.CANCELED <> 1)
    OR     (SAL_SERVICES_RETURNES.CONFIRMED = 1 AND SAL_SERVICES_RETURNES.CANCELED = 1 AND EXISTS ( SELECT 'X'
                                                                                                     FROM CUSTOMERS_OPEN_BALANCE, CUSTOMERS_OPEN_BALANCE_DTL
                                                                                                     WHERE CUSTOMERS_OPEN_BALANCE.DOCUMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.DEPARTMENT_ID = CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CONFIRMED = 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE.CANCELED <> 1
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DOCUMENT_ID = SAL_SERVICES_RETURNES.BASE_DOCUMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.DEPARTMENT_ID = SAL_SERVICES_RETURNES.BASE_DEPARTMENT_ID
                                                                                                     AND CUSTOMERS_OPEN_BALANCE_DTL.CUSTOMER_ID = SAL_SERVICES_RETURNES.CUSTOMER_ID
                                                                                                             )))
    AND SAL_SERVICES_RETURNES.PAYMENT_TYPE = 2
    --AND SAL_SERVICES_RETURNES.DOCUMENT_DATE >= V_DATE - V_DAY1
    --AND SAL_SERVICES_RETURNES.DOCUMENT_DATE <= V_DATE - V_DAY2
    AND SAL_SERVICES_RETURNES.DUE_DATE  > V_DATE
    AND SAL_SERVICES_RETURNES.DOCUMENT_DATE <= V_DATE 
    AND (SALES_MAN_ID=V_SALES_MAN_ID OR V_SALES_MAN_ID IS NULL)
    AND JOURNALS.DOCUMENT_DATE <= V_DATE
    AND SAL_SERVICES_RETURNES.CUSTOMER_ID = V_CUSTOMER_ID
    AND SAL_SERVICES_RETURNES.DOCUMENT_ID=V_DOCUMENT_ID
    AND SAL_SERVICES_RETURNES.DEPARTMENT_ID=V_DEPARTMENT_ID;
V_PAID_SER_INV_R NUMBER;
V_NET NUMBER;

begin
  IF V_DATE_TYPE =2 THEN
    IF V_DAY1 < 0 THEN
      OPEN C1;
      FETCH C1 INTO V_TOTAL;
      CLOSE C1;

      OPEN C2;
      FETCH C2 INTO V_PAID_SAL_INV;
      CLOSE C2;

      OPEN C3;
      FETCH C3 INTO V_PAID_SER_INV;
      CLOSE C3;

      OPEN C5;
      FETCH C5 INTO V_PAID_SAL_INV_R;
      CLOSE C5;

      OPEN C6;
      FETCH C6 INTO V_PAID_SER_INV_R;
      CLOSE C6;
      V_NET := NVL(V_TOTAL, 0) - NVL(V_PAID_SAL_INV, 0) - NVL(V_PAID_SER_INV,0) + NVL(V_PAID_SAL_INV_R, 0) + NVL(V_PAID_SER_INV_R,0);
    ELSE
      V_NET:=0 ; 
    END IF;

  ELSE
    V_NET := 0;
  END IF;
  
  RETURN(NVL(V_NET,0));
END;
/
